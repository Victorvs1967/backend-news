{"version":3,"sources":["./src/environments/environment.ts","./src/app/service/posts.service.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n// const REST_API = 'http://localhost:8080/news';\nconst REST_API = 'https://news-parser-weather-okre2o5mia-ey.a.run.app/news\"';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostsService {\n\n  private postUrl = REST_API;\n  // private postUrl = \"http://localhost:8080/news\";\n\n  constructor(private http: HttpClient) { }\n\n  getPosts(): Observable<string> {\n    return this.http.get(this.postUrl, { responseType: 'text' });\n  }\n}\n","<div class=\"container mt-4\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Link</th>\n            </tr>\n            </thead>\n            <tbody *ngFor=\"let post of posts\">\n            <tr>\n                <th scope=\"row\">{{post.id}}</th>\n                <td><strong>{{post.title}}</strong></td>\n                <td><a href={{post.url}}>{{post.url}}</a></td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { PostsService } from './service/posts.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  posts: string;\n  errorMessage: string;\n\n  constructor(private postsService: PostsService) { }\n\n  ngOnInit(): void {\n    this.postsService.getPosts().subscribe(\n      data => this.posts = JSON.parse(data),\n      error => this.errorMessage = `${error.status}: ${JSON.parse(error.error).message}`\n    );\n  }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}